#' Read depth per genomic position
#'
#' Plotting the average read depth as a function of genomic position
#' @param vcf_name The name of your vcf file
#' @return A plot for each chromosome with the position of the SNP in base pair on the x axis and the average number of reads on the y axis.
#' @export
read_depth_per_position <- function(vcf_name) {
# Loading the necessary packages
library(data.table)
# Reading the VCF file using readLines
vcf_lines <- readLines(vcf_name)
# Filtering out header lines (lines that start with "##")
header_lines <- vcf_lines[grepl("^##", vcf_lines)]
# Extracting the column names from the header line starting with "#CHROM"
column_names <- unlist(strsplit(vcf_lines[grepl("^#CHROM", vcf_lines)], "\t"))
# Reading the VCF data using data.table, skipping the header lines
vcf_data <- fread(vcf_name, skip = length(header_lines) + 1, sep = "\t", header = FALSE, fill = TRUE)
colnames(vcf_data)[1] <- "CHROM"
# Seting the column names
colnames(vcf_data) <- column_names
colnames(vcf_data)[1] <- "CHROM"
# outputing the information in the vcf file ("FORMAT" column)
format_infos <- vcf_data[1, "FORMAT"]
# creating a matrix
vcf_matrix <- as.matrix(vcf_data[ , 10:ncol(vcf_data)])
# Extracting the data from the matrix
sub_mat <- strsplit(vcf_matrix, ":")
infos <- unlist(strsplit(as.character(format_infos), split = ":"))
data_pos <- grep("NR|DP", infos)
if (!identical(data_pos, integer(0))) {
vector <- sapply(sub_mat, "[", data_pos)
data_matrix <- matrix(vector, nrow = nrow(vcf_matrix), ncol = ncol(vcf_matrix))
}
# Dealing with triallelic sites which have read depth coded as x,x
sub_mat2 <- strsplit(data_matrix, ",")
vector2 <- sapply(sub_mat2, "[", 1)
data_matrix2 <- matrix(vector2, nrow = nrow(vcf_matrix), ncol = ncol(vcf_matrix))
# converting the character matrix to a numeric matrix
data_matrix2 <- matrix(as.numeric(data_matrix2), ncol = ncol(data_matrix2))
# Calculating the average read depth per position
average_data_per_position <- data.frame(Chromosome = vcf_data$CHROM, Position = vcf_data$POS)
average_data_per_position$average_data <- rowMeans(data_matrix2)
# Plotting the read depth as a function of genomic position
library(ggplot2)
ggplot(data = average_data_per_position, aes(x = Position, y = average_data)) +
geom_point() +
facet_wrap(~Chromosome) +
labs(y= "Average read depth", x = "Position (bp)") +
ggtitle("Average read depth as a function of genomic position") +
theme(axis.text = element_text(size = 15), axis.title = element_text(size = 20), plot.title = element_text(size = 25)) +
labs(caption = paste("Input file:", vcf_name))
}
read_depth_per_position(vcf_name = "~/Labo_Belzile/Autre/scripts/vcfGrapher/input_files/FastGBS_platypus_noScaf_onlyPASS_rmIndels_minMaxAll2_mac4_max_missing02.vcf")
#' Read depth per genomic position
#'
#' Plotting the average read depth as a function of genomic position
#' @param vcf_name The name of your vcf file
#' @return A plot for each chromosome with the position of the SNP in base pair on the x axis and the average number of reads on the y axis.
#' @export
read_depth_per_position <- function(vcf_name) {
# Loading the necessary packages
library(data.table)
# Reading the VCF file using readLines
vcf_lines <- readLines(vcf_name)
# Filtering out header lines (lines that start with "##")
header_lines <- vcf_lines[grepl("^##", vcf_lines)]
# Extracting the column names from the header line starting with "#CHROM"
column_names <- unlist(strsplit(vcf_lines[grepl("^#CHROM", vcf_lines)], "\t"))
# Reading the VCF data using data.table, skipping the header lines
vcf_data <- fread(vcf_name, skip = length(header_lines) + 1, sep = "\t", header = FALSE, fill = TRUE)
colnames(vcf_data)[1] <- "CHROM"
# Seting the column names
colnames(vcf_data) <- column_names
colnames(vcf_data)[1] <- "CHROM"
# outputing the information in the vcf file ("FORMAT" column)
format_infos <- vcf_data[1, "FORMAT"]
# creating a matrix
vcf_matrix <- as.matrix(vcf_data[ , 10:ncol(vcf_data)])
# Extracting the data from the matrix
sub_mat <- strsplit(vcf_matrix, ":")
infos <- unlist(strsplit(as.character(format_infos), split = ":"))
data_pos <- grep("NR|DP", infos)
if (!identical(data_pos, integer(0))) {
vector <- sapply(sub_mat, "[", data_pos)
data_matrix <- matrix(vector, nrow = nrow(vcf_matrix), ncol = ncol(vcf_matrix))
}
# Dealing with triallelic sites which have read depth coded as x,x
sub_mat2 <- strsplit(data_matrix, ",")
vector2 <- sapply(sub_mat2, "[", 1)
data_matrix2 <- matrix(vector2, nrow = nrow(vcf_matrix), ncol = ncol(vcf_matrix))
# converting the character matrix to a numeric matrix
data_matrix2 <- matrix(as.numeric(data_matrix2), ncol = ncol(data_matrix2))
# Calculating the average read depth per position
average_data_per_position <- data.frame(Chromosome = vcf_data$CHROM, Position = vcf_data$POS)
average_data_per_position$average_data <- rowMeans(data_matrix2)
# Plotting the read depth as a function of genomic position
library(ggplot2)
ggplot(data = average_data_per_position, aes(x = Position, y = average_data)) +
geom_point() +
facet_wrap(~Chromosome) +
labs(y= "Average read depth", x = "Position (bp)") +
ggtitle("Average read depth as a function of genomic position") +
theme(axis.text = element_text(size = 10), axis.title = element_text(size = 20), plot.title = element_text(size = 25)) +
labs(caption = paste("Input file:", vcf_name))
}
read_depth_per_position(vcf_name = "~/Labo_Belzile/Autre/scripts/vcfGrapher/input_files/FastGBS_platypus_noScaf_onlyPASS_rmIndels_minMaxAll2_mac4_max_missing02.vcf")
#' Read depth per genomic position
#'
#' Plotting the average read depth as a function of genomic position
#' @param vcf_name The name of your vcf file
#' @return A plot for each chromosome with the position of the SNP in base pair on the x axis and the average number of reads on the y axis.
#' @export
read_depth_per_position <- function(vcf_name) {
# Loading the necessary packages
library(data.table)
# Reading the VCF file using readLines
vcf_lines <- readLines(vcf_name)
# Filtering out header lines (lines that start with "##")
header_lines <- vcf_lines[grepl("^##", vcf_lines)]
# Extracting the column names from the header line starting with "#CHROM"
column_names <- unlist(strsplit(vcf_lines[grepl("^#CHROM", vcf_lines)], "\t"))
# Reading the VCF data using data.table, skipping the header lines
vcf_data <- fread(vcf_name, skip = length(header_lines) + 1, sep = "\t", header = FALSE, fill = TRUE)
colnames(vcf_data)[1] <- "CHROM"
# Seting the column names
colnames(vcf_data) <- column_names
colnames(vcf_data)[1] <- "CHROM"
# outputing the information in the vcf file ("FORMAT" column)
format_infos <- vcf_data[1, "FORMAT"]
# creating a matrix
vcf_matrix <- as.matrix(vcf_data[ , 10:ncol(vcf_data)])
# Extracting the data from the matrix
sub_mat <- strsplit(vcf_matrix, ":")
infos <- unlist(strsplit(as.character(format_infos), split = ":"))
data_pos <- grep("NR|DP", infos)
if (!identical(data_pos, integer(0))) {
vector <- sapply(sub_mat, "[", data_pos)
data_matrix <- matrix(vector, nrow = nrow(vcf_matrix), ncol = ncol(vcf_matrix))
}
# Dealing with triallelic sites which have read depth coded as x,x
sub_mat2 <- strsplit(data_matrix, ",")
vector2 <- sapply(sub_mat2, "[", 1)
data_matrix2 <- matrix(vector2, nrow = nrow(vcf_matrix), ncol = ncol(vcf_matrix))
# converting the character matrix to a numeric matrix
data_matrix2 <- matrix(as.numeric(data_matrix2), ncol = ncol(data_matrix2))
# Calculating the average read depth per position
average_data_per_position <- data.frame(Chromosome = vcf_data$CHROM, Position = vcf_data$POS)
average_data_per_position$average_data <- rowMeans(data_matrix2)
# Plotting the read depth as a function of genomic position
library(ggplot2)
ggplot(data = average_data_per_position, aes(x = Position, y = average_data)) +
geom_point() +
facet_wrap(~Chromosome) +
labs(y= "Average read depth", x = "Position (bp)") +
ggtitle("Average read depth as a function of genomic position") +
theme(axis.text.x = element_text(angle = 90),axis.text = element_text(size = 10), axis.title = element_text(size = 20), plot.title = element_text(size = 25)) +
labs(caption = paste("Input file:", vcf_name))
}
read_depth_per_position(vcf_name = "~/Labo_Belzile/Autre/scripts/vcfGrapher/input_files/FastGBS_platypus_noScaf_onlyPASS_rmIndels_minMaxAll2_mac4_max_missing02.vcf")
